[{"/Users/andrew/GitHub/todobubu/src/components/Todo.js":"1","/Users/andrew/GitHub/todobubu/src/App.js":"2","/Users/andrew/GitHub/todobubu/src/components/Timeslot.js":"3","/Users/andrew/GitHub/todobubu/src/components/Status.js":"4","/Users/andrew/GitHub/todobubu/src/components/Button.js":"5","/Users/andrew/GitHub/todobubu/src/index.js":"6","/Users/andrew/GitHub/todobubu/src/reportWebVitals.js":"7","/Users/andrew/GitHub/todobubu/src/components/PopupClear.js":"8","/Users/andrew/GitHub/todobubu/src/components/Clear.js":"9","/Users/andrew/GitHub/todobubu/src/components/PopupEdit.js":"10","/Users/andrew/GitHub/todobubu/src/components/PopupAddTodo.js":"11"},{"size":910,"mtime":1610353588031,"results":"12","hashOfConfig":"13"},{"size":5955,"mtime":1610471163141,"results":"14","hashOfConfig":"13"},{"size":600,"mtime":1610471177735,"results":"15","hashOfConfig":"13"},{"size":382,"mtime":1610390454934,"results":"16","hashOfConfig":"13"},{"size":382,"mtime":1610297390943,"results":"17","hashOfConfig":"13"},{"size":500,"mtime":1610164848712,"results":"18","hashOfConfig":"13"},{"size":362,"mtime":1610162927383,"results":"19","hashOfConfig":"13"},{"size":823,"mtime":1610471105767,"results":"20","hashOfConfig":"13"},{"size":287,"mtime":1610468559198,"results":"21","hashOfConfig":"13"},{"size":7103,"mtime":1610474260134,"results":"22","hashOfConfig":"13"},{"size":3541,"mtime":1610468020702,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2k8i98",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrew/GitHub/todobubu/src/components/Todo.js",[],"/Users/andrew/GitHub/todobubu/src/App.js",["49"],"/Users/andrew/GitHub/todobubu/src/components/Timeslot.js",[],"/Users/andrew/GitHub/todobubu/src/components/Status.js",[],"/Users/andrew/GitHub/todobubu/src/components/Button.js",[],"/Users/andrew/GitHub/todobubu/src/index.js",[],["50","51"],"/Users/andrew/GitHub/todobubu/src/reportWebVitals.js",[],["52","53"],"/Users/andrew/GitHub/todobubu/src/components/PopupClear.js",[],"/Users/andrew/GitHub/todobubu/src/components/Clear.js",[],"/Users/andrew/GitHub/todobubu/src/components/PopupEdit.js",["54"],"import React from \"react\";\nimport Button from \"./Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\nimport { useState, useEffect } from \"react\";\n\nconst PopupEdit = ({\n  createTodoHandler,\n  edit,\n  editHandler,\n  inputTitle,\n  setInputTitle,\n  inputDesc,\n  setInputDesc,\n  inputStart,\n  setInputStart,\n  inputEnd,\n  setInputEnd,\n  inputDur,\n  setInputDur,\n  duration,\n  setDuration,\n  currentTodo,\n  todos,\n  setTodos,\n  delay,\n  setDelay,\n}) => {\n  // useState\n  const [postponed, setPostponed] = useState(false);\n\n  // Handler\n  const inputTitleHandler = (e) => {\n    setInputTitle(e.target.value);\n  };\n  const inputDescHandler = (e) => {\n    setInputDesc(e.target.value);\n  };\n  const inputStartHandler = (e) => {\n    setInputStart(e.target.value.toString());\n  };\n  const inputEndHandler = (e) => {\n    setInputEnd(e.target.value.toString());\n  };\n\n  const inputDurHandler = (e) => {\n    setInputDur(e.target.value.toString());\n  };\n\n  const delayHandler = (e) => {\n    setDelay(e.target.value.toString());\n  };\n\n  const delayCalc = (e) => {\n    function addDelay(time) {\n      const hours = time.substring(0, 2);\n      const mins = time.substring(2, 4);\n      let hoursNum = Number(hours);\n      let minsNum = Number(mins);\n      minsNum += Number(delay);\n      let offset = Math.floor(minsNum / 60);\n      minsNum %= 60;\n      hoursNum += offset;\n\n      setPostponed(false);\n      if (hoursNum > 23) {\n        setPostponed(true);\n        hoursNum %= 24;\n      }\n\n      return (\n        hoursNum.toString().padStart(2, \"0\") +\n        minsNum.toString().padStart(2, \"0\")\n      );\n    }\n\n    let passed = false;\n    setTodos(\n      todos.map((item) => {\n        if (item.id === currentTodo) {\n          passed = true;\n        }\n        if (passed) {\n          return {\n            ...item,\n            start: addDelay(item.start),\n            end: addDelay(item.end),\n            postponed: postponed,\n          };\n        }\n\n        return item;\n      })\n    );\n    passed = false;\n\n    setDelay(0);\n    editHandler(e);\n  };\n\n  const keyPressHandler = (e) => {\n    if (e.key === \"Enter\") {\n      if (inputTitle) {\n        createTodoHandler(e);\n      }\n    }\n  };\n\n  const editedHandler = (e) => {\n    e.preventDefault();\n    let inputEndDur;\n    if (duration) {\n      const hours = inputStart.substring(0, 2);\n      const mins = inputStart.substring(2, 4);\n      let hoursNum = Number(hours);\n      let minsNum = Number(mins);\n      minsNum += Number(inputDur);\n      let offset = Math.floor(minsNum / 60);\n      minsNum %= 60;\n      hoursNum += offset;\n      setInputEnd(\n        hoursNum.toString().padStart(2, \"0\") +\n          minsNum.toString().padStart(2, \"0\")\n      );\n      inputEndDur =\n        hoursNum.toString().padStart(2, \"0\") +\n        minsNum.toString().padStart(2, \"0\");\n    }\n\n    setTodos(\n      todos.map((item) => {\n        if (item.id === currentTodo) {\n          return {\n            ...item,\n            title: inputTitle,\n            desc: inputDesc ? inputDesc : \"Nothing special ...\",\n            start: inputStart,\n            end: duration ? inputEndDur : inputEnd,\n            dur: inputDur,\n            duration: duration,\n          };\n        }\n        return item;\n      })\n    );\n\n    setInputTitle(\"\");\n    setInputDesc(\"\");\n    setInputStart(\"\");\n    setInputEnd(\"\");\n\n    editHandler(e);\n  };\n\n  const deleteHandler = (e) => {\n    setTodos(todos.filter((item) => item.id !== currentTodo));\n    editHandler(e);\n  };\n\n  // useEffect()\n  useEffect(() => {\n    todos.forEach((todo) => {\n      if (todo.id === currentTodo) {\n        setInputTitle(todo.title);\n        setInputStart(todo.start);\n        setInputEnd(todo.end);\n        setInputDesc(todo.desc);\n        setInputDur(todo.dur);\n        setDuration(todo.duration);\n      }\n    });\n  }, [edit]);\n\n  return (\n    <div className=\"edit\">\n      <form className={edit ? \"edit-content active\" : \"edit-content\"}>\n        <textarea\n          onChange={inputTitleHandler}\n          onKeyPress={keyPressHandler}\n          className=\"input-title\"\n          placeholder=\"Sleep all day? Fail to wake ...\"\n          value={inputTitle}\n          rows=\"2\"\n        ></textarea>\n        <p className=\"label-delay\">\n          Quick delay (Delay on this todo and afterwards)\n        </p>\n        <div className=\"field-wrap\">\n          <div className=\"button-delay\" onClick={delayCalc}>\n            <FontAwesomeIcon className=\"icon\" icon={faStopwatch} />\n          </div>\n          <input\n            onChange={delayHandler}\n            className=\"input-delay\"\n            placeholder=\"0\"\n            value={delay}\n            type=\"number\"\n            inputMode=\"numeric\"\n            maxLength=\"4\"\n          />\n          <div className=\"delay-unit\">mins</div>\n        </div>\n        <div className=\"field-wrap\">\n          <div className=\"field-start\">\n            <p className=\"label-start\">When to start?</p>\n            <input\n              onChange={inputStartHandler}\n              className=\"input-start\"\n              placeholder={\n                new Date().getHours().toString().padStart(2, \"0\") +\n                new Date().getMinutes().toString().padStart(2, \"0\")\n              }\n              value={inputStart}\n              type=\"number\"\n              inputMode=\"numeric\"\n              maxLength=\"4\"\n            />\n          </div>\n          <div className=\"field-end\">\n            <p className=\"label-end\">\n              {duration ? \"How long?\" : \"When to end?\"}\n            </p>\n            <div className=\"wrapper\">\n              <div\n                className=\"button-duration\"\n                onClick={() => setDuration(!duration)}\n              >\n                <FontAwesomeIcon className=\"icon\" icon={faClock} />\n              </div>\n              <input\n                onChange={duration ? inputDurHandler : inputEndHandler}\n                className={duration ? \"input-dur\" : \"input-end\"}\n                placeholder={duration ? \"30\" : \"1000\"}\n                value={duration ? inputDur : inputEnd}\n                type=\"number\"\n                inputMode=\"numeric\"\n                maxLength=\"4\"\n              />\n              <div\n                className={duration ? \"duration-unit active\" : \"duration-unit\"}\n              >\n                mins\n              </div>\n            </div>\n          </div>\n        </div>\n        <p className=\"label-desc\">Descriptions</p>\n        <textarea\n          onChange={inputDescHandler}\n          onKeyPress={keyPressHandler}\n          className=\"input-desc\"\n          placeholder=\"Apple, Banana, Carrot ...\"\n          value={inputDesc}\n          rows=\"5\"\n        ></textarea>\n        <div className=\"buttons\">\n          <Button action={editedHandler} text=\"Done\" />\n          <Button action={deleteHandler} text=\"Delete\" />\n        </div>\n      </form>\n      <div\n        onClick={editHandler}\n        className={edit ? \"edit-bg active\" : \"edit-bg\"}\n      ></div>\n    </div>\n  );\n};\n\nexport default PopupEdit;\n","/Users/andrew/GitHub/todobubu/src/components/PopupAddTodo.js",[],{"ruleId":"55","severity":1,"message":"56","line":50,"column":6,"nodeType":"57","endLine":50,"endColumn":13,"suggestions":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"59","replacedBy":"63"},{"ruleId":"61","replacedBy":"64"},{"ruleId":"55","severity":1,"message":"65","line":173,"column":6,"nodeType":"57","endLine":173,"endColumn":12,"suggestions":"66"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveLocal'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"React Hook useEffect has missing dependencies: 'currentTodo', 'setDuration', 'setInputDesc', 'setInputDur', 'setInputEnd', 'setInputStart', 'setInputTitle', and 'todos'. Either include them or remove the dependency array. If 'setInputTitle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["70"],{"desc":"71","fix":"72"},"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [saveLocal, todos]",{"range":"75","text":"76"},"Update the dependencies array to be: [currentTodo, edit, setDuration, setInputDesc, setInputDur, setInputEnd, setInputStart, setInputTitle, todos]",{"range":"77","text":"78"},[1589,1596],"[saveLocal, todos]",[3935,3941],"[currentTodo, edit, setDuration, setInputDesc, setInputDur, setInputEnd, setInputStart, setInputTitle, todos]"]